"""Event Detection Average Precision

An average precision metric for event detection in time series and
video.

"""

import numpy as np
import pandas as pd
import pandas.api.types
from typing import Dict, List, Tuple
import matplotlib.pyplot as plt

class ParticipantVisibleError(Exception):
    pass


# Set some placeholders for global parameters
series_id_column_name = None
time_column_name = None
event_column_name = None
score_column_name = None
use_scoring_intervals = None
all_tps = []
all_fps = []

def score(
        solution: pd.DataFrame,
        submission: pd.DataFrame,
        tolerances: Dict[str, List[float]],
        series_id_column_name: str,
        time_column_name: str,
        event_column_name: str,
        score_column_name: str,
        use_scoring_intervals: bool = False,
) -> float:
    """Event Detection Average Precision, an AUCPR metric for event detection in
    time series and video.

    This metric is similar to IOU-threshold average precision metrics commonly
    used in object detection. For events occuring in time series, we replace the
    IOU threshold with a time tolerance.

    Submissions are evaluated on the average precision of detected events,
    averaged over timestamp error tolerance thresholds, averaged over event
    classes.

    Detections are matched to ground-truth events within error tolerances, with
    ambiguities resolved in order of decreasing confidence.

    Detailed Description
    --------------------
    Evaluation proceeds in four steps:

    1. Selection - (optional) Predictions not within a series' scoring
    intervals are dropped.
    2. Assignment - Predicted events are matched with ground-truth events.
    3. Scoring - Each group of predictions is scored against its corresponding
    group of ground-truth events via Average Precision.
    4. Reduction - The multiple AP scores are averaged to produce a single
    overall score.

    Selection

    With each series there may be a defined set of scoring intervals giving the
    intervals of time over which zero or more ground-truth events might be
    annotated in that series. A prediction will be evaluated only if it falls
    within a scoring interval. These scoring intervals can be chosen to improve
    the fairness of evaluation by, for instance, ignoring edge-cases or
    ambiguous events.

    It is recommended that, if used, scoring intervals be provided for training
    data but not test data.

    Assignment

    For each set of predictions and ground-truths within the same `event x
    tolerance x series_id` group, we match each ground-truth to the
    highest-confidence unmatched prediction occurring within the allowed
    tolerance.

    Some ground-truths may not be matched to a prediction and some predictions
    may not be matched to a ground-truth. They will still be accounted for in
    the scoring, however.

    Scoring

    Collecting the events within each `series_id`, we compute an Average
    Precision score for each `event x tolerance` group. The average precision
    score is the area under the (step-wise) precision-recall curve generated by
    decreasing confidence score thresholds over the predictions. In this
    calculation, matched predictions over the threshold are scored as TP and
    unmatched predictions as FP. Unmatched ground-truths are scored as FN.

    Reduction

    The final score is the average of the above AP scores, first averaged over
    tolerance, then over event.

    Parameters
    ----------
    solution : pd.DataFrame, with columns:

        `series_id_column_name` identifier for each time series

        `time_column_name` the time of occurence for each event as a numeric type

        `event_column_name` class label for each event

        The solution contains the time of occurence of one or more types of
        event within one or more time series. The metric expects the solution to
        contain the same event types as those given in `tolerances`.

        When `use_scoring_intervals == True`, you may include `start` and `end`
        events to delimit intervals within which detections will be scored.
        Detected events (from the user submission) outside of these events will
        be ignored.

    submission : pd.DataFrame, with columns as above and in addition:

        `score_column_name` the predicted confidence score for the detected event

    tolerances : Dict[str, List[float]]

        Maps each event class to a list of timestamp tolerances used
        for matching detections to ground-truth events.

    use_scoring_intervals: bool, default False

        Whether to ignore predicted events outside intervals delimited
        by `'start'` and `'end'` events in the solution. When `False`,
        the solution should not include `'start'` and `'end'` events.
        See the examples for illustration.

    Returns
    -------
    event_detection_ap : float
        The mean average precision of the detected events.

    Examples
    --------
    Detecting `'pass'` events in football:


    """
    # Validate metric parameters
    assert len(tolerances) > 0, "Events must have defined tolerances."
    assert set(tolerances.keys()) == set(solution[event_column_name]).difference({'start', 'end'}),\
        (f"Solution column {event_column_name} must contain the same events "
         "as defined in tolerances.")
    assert pd.api.types.is_numeric_dtype(solution[time_column_name]),\
        f"Solution column {time_column_name} must be of numeric type."

    # Validate submission format
    for column_name in [
        series_id_column_name,
        time_column_name,
        event_column_name,
        score_column_name,
    ]:
        if column_name not in submission.columns:
            raise ParticipantVisibleError(f"Submission must have column '{target_name}'.")

    if not pd.api.types.is_numeric_dtype(submission[time_column_name]):
        raise ParticipantVisibleError(
            f"Submission column '{time_column_name}' must be of numeric type."
        )
    if not pd.api.types.is_numeric_dtype(submission[score_column_name]):
        raise ParticipantVisibleError(
            f"Submission column '{score_column_name}' must be of numeric type."
        )

    # Set these globally to avoid passing around a bunch of arguments
    globals()['series_id_column_name'] = series_id_column_name
    globals()['time_column_name'] = time_column_name
    globals()['event_column_name'] = event_column_name
    globals()['score_column_name'] = score_column_name
    globals()['use_scoring_intervals'] = use_scoring_intervals

    return event_detection_ap(solution, submission, tolerances)


def filter_detections(
        detections: pd.DataFrame, intervals: pd.DataFrame
) -> pd.DataFrame:
    """Drop detections not inside a scoring interval."""
    detection_time = detections.loc[:, time_column_name].sort_values().to_numpy()
    intervals = intervals.to_numpy()
    is_scored = np.full_like(detection_time, False, dtype=bool)

    i, j = 0, 0
    while i < len(detection_time) and j < len(intervals):
        time = detection_time[i]
        int_ = intervals[j]

        # If the detection is prior in time to the interval, go to the next detection.
        if time < int_.left:
            i += 1
        # If the detection is inside the interval, keep it and go to the next detection.
        elif time in int_:
            is_scored[i] = True
            i += 1
        # If the detection is later in time, go to the next interval.
        else:
            j += 1

    return detections.loc[is_scored].reset_index(drop=True)


def match_detections(
        tolerance: float, ground_truths: pd.DataFrame, detections: pd.DataFrame
) -> pd.DataFrame:
    """Match detections to ground truth events. Arguments are taken from a common event x tolerance x series_id evaluation group."""
    detections_sorted = detections.sort_values(score_column_name, ascending=False).dropna()
    is_matched = np.full_like(detections_sorted[event_column_name], False, dtype=bool)
    gts_matched = set()
    for i, det in enumerate(detections_sorted.itertuples(index=False)):
        best_error = tolerance
        best_gt = None

        for gt in ground_truths.itertuples(index=False):
            error = abs(getattr(det, time_column_name) - getattr(gt, time_column_name))
            if error < best_error and gt not in gts_matched:
                best_gt = gt
                best_error = error

        if best_gt is not None:
            is_matched[i] = True
            gts_matched.add(best_gt)

    detections_sorted['matched'] = is_matched
    #print(detections_sorted)
    return detections_sorted


def precision_recall_curve(
        matches: np.ndarray, scores: np.ndarray, p: int
) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:
    if len(matches) == 0:
        return [1], [0], []

    # Sort matches by decreasing confidence
    idxs = np.argsort(scores, kind='stable')[::-1]
    scores = scores[idxs]
    matches = matches[idxs]

    distinct_value_indices = np.where(np.diff(scores))[0]
    threshold_idxs = np.r_[distinct_value_indices, matches.size - 1]
    thresholds = scores[threshold_idxs]

    # Matches become TPs and non-matches FPs as confidence threshold decreases
    tps = np.cumsum(matches)[threshold_idxs]
    fps = np.cumsum(~matches)[threshold_idxs]
    globals()['all_tps'].append(tps)
    globals()['all_fps'].append(fps)
    # print('TPS',tps)
    # print('FPS',fps)
    precision = tps / (tps + fps)
    precision[np.isnan(precision)] = 0
    #print('precision', precision)
    recall = tps / p  # total number of ground truths might be different than total number of matches
    #print('recall', recall)
    # Stop when full recall attained and reverse the outputs so recall is non-increasing.
    last_ind = tps.searchsorted(tps[-1])
    sl = slice(last_ind, None, -1)

    # Final precision is 1 and final recall is 0
    return np.r_[precision[sl], 1], np.r_[recall[sl], 0], thresholds[sl]


def average_precision_score(matches: np.ndarray, scores: np.ndarray, p: int) -> float:
    precision, recall, _ = precision_recall_curve(matches, scores, p)
    #TODO clean this shit up

    # print('precision:', precision)
    # print('recall:', recall)

    # to plot the rectangles the exact way they calculate the area
    # need to generate new_precision recall pairs [r1,p0], [r2,p1], [r3,p2] etc.
    # remove first item of recall
    # remove last item of precision
    # pair those points together
    # those are the new points
    old_points_filtered = dict()
    for i in range(len(recall)):
        val = old_points_filtered.get(recall[i],-1)
        if precision[i] > val:
            old_points_filtered[recall[i]] = precision[i]

    old_points_df = pd.DataFrame({'recall': list(old_points_filtered.keys()),\
                                       'precision': list(old_points_filtered.values())})
    # new_points = np.array([old_points_df['recall'].to_numpy()[1:],\
    #                        old_points_df['precision'].to_numpy()])
    old_points = np.array([old_points_df['recall'].to_numpy(),\
                           old_points_df['precision'].to_numpy()])
    #print(old_points_df['recall'].to_numpy().shape)

    # old plotting method
    #print('old_points',old_points)
    plt.figure()
    plt.scatter(old_points_filtered.keys(), old_points_filtered.values(), c='g')
    plt.show()
    print(old_points.shape)
    # new_points = np.array([recall[1:], precision[:-1]])
    # print(new_points.shape)
    #
    # old_points = np.array([recall, precision])
    # new_points = np.array([recall[1:], precision[:-1]])
    # # start with old point, add new_point
    # plot_points = []
    # for i in range(old_points.shape[1] + new_points.shape[1]):
    #     if i % 2 == 0:
    #         plot_points.append(old_points[:, i // 2])
    #     else:
    #         plot_points.append(new_points[:, i // 2])
    # plot_points = np.array(plot_points)
    #
    # plt.figure()
    # plt.plot(plot_points)
    # print('plot_points',plot_points)

    # Compute step integral
    return -np.sum(np.diff(recall) * np.array(precision)[:-1])


def event_detection_ap(
        solution: pd.DataFrame,
        submission: pd.DataFrame,
        tolerances: Dict[str, List[float]],
) -> float:

    # Ensure solution and submission are sorted properly
    solution = solution.sort_values([series_id_column_name, time_column_name])
    submission = submission.sort_values([series_id_column_name, time_column_name])

    # Extract scoring intervals.
    if use_scoring_intervals:
        intervals = (
            solution
            .query("event in ['start', 'end']")
            .assign(interval=lambda x: x.groupby([series_id_column_name, event_column_name]).cumcount())
            .pivot(
                index='interval',
                columns=[series_id_column_name, event_column_name],
                values=time_column_name,
            )
            .stack(series_id_column_name)
            .swaplevel()
            .sort_index()
            .loc[:, ['start', 'end']]
            .apply(lambda x: pd.Interval(*x, closed='both'), axis=1)
        )

    # Extract ground-truth events.
    ground_truths = (
        solution
        .query("event not in ['start', 'end']")
        .reset_index(drop=True)
    )

    # Map each event class to its prevalence (needed for recall calculation)
    class_counts = ground_truths.value_counts(event_column_name).to_dict()

    # Create table for detections with a column indicating a match to a ground-truth event
    detections = submission.assign(matched = False)

    # Remove detections outside of scoring intervals
    if use_scoring_intervals:
        detections_filtered = []
        for (det_group, dets), (int_group, ints) in zip(
            detections.groupby(series_id_column_name), intervals.groupby(series_id_column_name)
        ):
            assert det_group == int_group
            detections_filtered.append(filter_detections(dets, ints))
        detections_filtered = pd.concat(detections_filtered, ignore_index=True)
    else:
        detections_filtered = detections

    # Create table of event-class x tolerance x series_id values
    aggregation_keys = pd.DataFrame(
        [(ev, tol, vid)
         for ev in tolerances.keys()
         for tol in tolerances[ev]
         for vid in ground_truths[series_id_column_name].unique()],
        columns=[event_column_name, 'tolerance', series_id_column_name],
    )

    # Create match evaluation groups: event-class x tolerance x series_id
    detections_grouped = (
        aggregation_keys
        .merge(detections_filtered, on=[event_column_name, series_id_column_name], how='left')
        .groupby([event_column_name, 'tolerance', series_id_column_name])
    )
    ground_truths_grouped = (
        aggregation_keys
        .merge(ground_truths, on=[event_column_name, series_id_column_name], how='left')
        .groupby([event_column_name, 'tolerance', series_id_column_name])
    )
    # Match detections to ground truth events by evaluation group
    detections_matched = []
    for key in aggregation_keys.itertuples(index=False):
        dets = detections_grouped.get_group(key)
        gts = ground_truths_grouped.get_group(key)
        detections_matched.append(
            match_detections(dets['tolerance'].iloc[0], gts, dets)
        )
    detections_matched = pd.concat(detections_matched)

    # Compute AP per event x tolerance group
    event_classes = ground_truths[event_column_name].unique()
    ap_table = (
        detections_matched
        .query("event in @event_classes")
        .groupby([event_column_name, 'tolerance']).apply(
            lambda group: average_precision_score(
                group['matched'].to_numpy(),
                group[score_column_name].to_numpy(),
                class_counts[group[event_column_name].iat[0]],
            )
        )
    )
    # Average over tolerances, then over event classes
    mean_ap = ap_table.groupby(event_column_name).mean().sum() / len(event_classes)

    return mean_ap

column_names = {
'series_id_column_name': 'video_id',
'time_column_name': 'time',
'event_column_name': 'event',
'score_column_name': 'score',
}

tolerances = {'pass': [1.0]}
solution = pd.DataFrame({
'video_id': ['a', 'a', 'a', 'a'],
'event': ['start', 'pass', 'pass', 'end'],
'time': [0, 10, 20, 30],
})
submission = pd.DataFrame({
'video_id': ['a', 'a', 'a'],
'event': ['pass', 'pass', 'pass'],
'score': [1.0, 1.0, 1.0],
'time': [10, 20, 40],
})
#print(score(solution, submission, tolerances, **column_names, use_scoring_intervals=False))
# import 1 sequences data
# generate fake predicitons for it using the already known labels
# look at the score

#TODO make this work without local paths

train_events = pd.read_csv("C:\\Users\\Tolga\\Downloads\\train_events.csv")
# pick an event to look at
event_id = train_events['series_id'].unique()[0]
train_event = train_events.loc[train_events['series_id'] == event_id]
# now only take onsets from this event also dropping the nans (nans lead to lower score)
onset_steps = train_event.loc[train_event['event'] == 'onset']['step'].dropna()
onset_steps = onset_steps.to_numpy()
#print(onset_steps)

# now using these steps create a sample submission

#print(test_score)

def gaussian_predictions(prediction_timestamps, prediction_confidences, sigmas, num_points=11):
    # this function will, for a given array of timesteps and their confidences, will generate a
    # gaussian curve around each prediction using the given sigma value
    # and it will generate new predcitions each 1 sigma apart up to 5 sigma in both directions of the original prediction
    # so for each predcition it will return the original predicition and num_points-1 more predictions around it

    # Create an array of x values spanning from -5 sigma to +5 sigma
    all_results = np.empty((0, 2))
    # if num_points is even it destroys the original number so we make it an odd number
    if num_points % 2 == 0:
        num_points += 1
    for i in range(len(prediction_timestamps)):
        timestamp = prediction_timestamps[i]
        confidence = prediction_confidences[i]
        sigma = sigmas[i]
        x_values = np.linspace(timestamp - 5 * sigma, timestamp + 5 * sigma, num_points)

        # Calculate the corresponding y values using the Gaussian formula
        y_values = confidence * np.exp(-(x_values - timestamp) ** 2 / (2 * sigma ** 2))

        # Combine x and y values into a list of (x, y) tuples
        results = np.column_stack((x_values, y_values))
        all_results = np.concatenate((all_results, results), axis=0)

    # returns a 2 column vector where the 0th col is the timestamps and the 1st column is the y values
    # to plot do this: plt.plot(new_points[:,0], new_points[:,1])
    # timestamps = new_points[:,0]
    # confidences = new_points[:,1]
    return all_results


# test code to see if the function works

# for each r value of the generated points
# only add the original points at that r value with p >= p of the artificial data

test_timestamps = onset_steps
test_confidences = np.linspace(0.4,1,len(onset_steps))
test_sigmas = [1] * len(onset_steps)

old_points = np.array([test_timestamps, test_confidences])
#print('old_preds',old_points)
new_points = gaussian_predictions(prediction_timestamps=test_timestamps, prediction_confidences=test_confidences,\
                                  sigmas=test_sigmas, num_points=29)
#print('new_preds',new_points)

#new points has an x column and a y column
plt.figure()
plt.ylim((0,1))
plt.plot(old_points[0], old_points[1])
plt.plot(new_points[:,0], new_points[:,1])
plt.show()

# now using the newly generated points see if the recall values keep increasing as confidences go down

tolerances = {'onset': [12, 36, 60, 90, 120, 150, 180, 240, 300, 360]}
solution = pd.DataFrame({
'video_id': [event_id] * len(onset_steps),
'event': ['onset'] * len(onset_steps),
'time': onset_steps,
})

# for now keeping it the same as the answer
submission = pd.DataFrame({
'video_id': [event_id] * len(new_points[:,0]),
'event': ['onset'] * len(new_points[:,0]),
'time': np.add(new_points[:,0], 100),
'score': new_points[:,1]
})

test_score = score(solution, submission, tolerances, **column_names, use_scoring_intervals=False)

print(test_score)

# print('FP', all_fps)
# print(np.sum(np.diff(np.array(all_tps),axis=0)))
# print(np.sum(np.diff(np.array(all_fps),axis=0)))